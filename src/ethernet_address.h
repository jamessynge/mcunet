#ifndef MCUNET_SRC_ETHERNET_ADDRESS_H_
#define MCUNET_SRC_ETHERNET_ADDRESS_H_

// EthernetAddress holds a 48-bit, 6-octet media access control (MAC) address,
// and provides support for randomly generating Organizationally Unique, Unicast
// addresses, optionally with a specified prefix.
//
// OuiPrefix represents an Organizationally Unique Prefix of a Unicast Ethernet
// address (details below). By providing a fixed prefix when generating Ethernet
// addresses in an Arduino sketch, it becomes easier to identify devices whose
// addresses were produced by the same sketch (e.g. when using WireShark)
// because all such devices will have the same first 3 bytes of their address,
// followed by 3 randomly generated bytes (see EthernetAddress::Generate).
//
////////////////////////////////////////////////////////////////////////////////
//
// Relatively inexpensive Arduino boards or shields with Ethernet support are
// unlikely to have a factory assigned MAC address, most likely due to the
// expensve of purchasing a block of MAC addresses. However, each device on an
// Ethernet network just have a unique MAC address in order to (reliably)
// communicate.
//
// Fortunately the design of MAC addresses allows for both globally unique
// addresses (i.e. assigned at the factory, unique world-wide) and locally
// unique addresses. This code will generate an address in the range allowed for
// local administered addresses and store it in EEPROM. Note though that there
// is no support here for probing to ensure that the allocated address is free.
// Read more about the issue here:
//
//     https://serverfault.com/a/40720
//     https://en.wikipedia.org/wiki/MAC_address#Universal_vs._local
//
// Quoting from the wikipedia article:
//
//     Universally administered and locally administered addresses are
//     distinguished by setting the second least significant bit of the
//     most significant byte of the address. If the bit is 0, the address
//     is universally administered. If it is 1, the address is locally
//     administered. In the example address 02-00-00-00-00-01 the most
//     significant byte is 02h. The binary is 00000010 and the second
//     least significant bit is 1. Therefore, it is a locally
//     administered address.

#include <McuCore.h>

namespace mcunet {

class OuiPrefix {
 public:
  // Ctor will ensure that the bit marking this as an OUI is set, and that
  // the multicast address bit is cleared.
  OuiPrefix(uint8_t byte0, uint8_t byte1, uint8_t byte2);

  // Prints the bytes in the standard Ethernet format.
  size_t printTo(Print& out) const;

  // Return the requested byte.
  uint8_t operator[](const uint8_t idx) const {
    MCU_DCHECK_LT(idx, 3);
    return bytes_[idx];
  }

  bool operator==(const OuiPrefix& other) const;
  bool operator!=(const OuiPrefix& other) const { return !(*this == other); }

  // Modifies (if necessary) `first_byte` such that it can be the first byte of
  // a Unicast, Organizationally Unique Ethernet address.
  static uint8_t ToOuiUnicast(uint8_t first_byte);

 private:
  uint8_t bytes_[3];
};

struct EthernetAddress {
  // Fills bytes with a randomly generated, non-broadcast MAC address in the
  // space of Organizationally Unique Identifiers. If an OuiPrefix is supplied,
  // it will be used as the first 3 bytes of the MAC address.
  // The Arduino random number library is used, so be sure to seed it according
  // to the level or randomness you want in the generated address; if you don't
  // set the seed, the Arduino random number library will produce the same
  // sequence of numbers each time, and thus the "random" address won't be
  // random at all.
  void GenerateAddress(const OuiPrefix* oui_prefix = nullptr);

  // Read the address from the region, starting at the cursor.
  mcucore::Status ReadFromRegion(mcucore::EepromRegionReader& region);

  // Write the address to the region, starting at the cursor.
  mcucore::Status WriteToRegion(mcucore::EepromRegion& region) const;

  // Returns true if the first 3 bytes match the specified prefix.
  bool HasOuiPrefix(const OuiPrefix& oui_prefix) const;

  // Prints the bytes in the standard Ethernet format.
  size_t printTo(Print& out) const;

  uint8_t bytes[6]
#ifdef MCU_HAVE_MEMORY_SANITIZER
      = {0, 0, 0, 0, 0, 0}
#endif
  ;
};

// May not use these operators in an embedded environment, but it's convenient
// to define them here, rather than just for tests.
bool operator==(const EthernetAddress& lhs, const EthernetAddress& rhs);
inline bool operator!=(const EthernetAddress& lhs, const EthernetAddress& rhs) {
  return !(lhs == rhs);
}
bool operator<(const EthernetAddress& lhs, const EthernetAddress& rhs);

}  // namespace mcunet

#endif  // MCUNET_SRC_ETHERNET_ADDRESS_H_
